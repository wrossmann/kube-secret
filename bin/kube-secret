#!/usr/bin/env python
import yaml, pprint, tempfile, os, sys, hashlib, base64
from subprocess import call

if len(sys.argv) != 2:
    raise ValueError('You must specify a filename.')
elif os.access(sys.argv[1], os.R_OK|os.W_OK) == False:
    raise ValueError('File must be readable and writeable.')
filename = sys.argv[1]

editor = os.environ.get('EDITOR', 'vim')

with open(filename, 'r') as stream:
    try:
        raw = yaml.load(stream)
        if raw['kind'] != 'Secret':
            raise ValueError('Supplied resource is not a Secret')
        for key,value in raw['data'].items():
            raw['data'][key] = base64.b64decode(value)
    except Exception as exc:
        print "Error: %s" % exc
        sys.exit(1)

txt = yaml.dump(raw, default_flow_style=False)
txt_hash = hashlib.md5(txt)

with tempfile.NamedTemporaryFile(suffix='.tmp.yaml') as tf:
    try:
        tf.write(txt)
        tf.flush()
        call([editor, tf.name])
    
        tf.seek(0);
        edited = tf.read()
        edited_hash = hashlib.md5(edited)
    
        if txt_hash.digest() != edited_hash.digest():
            print "Content has changed, writing file..."
            out_data = yaml.load(edited)
            if out_data['kind'] != 'Secret':
                raise ValueError('Resource type is no longer a Secret!')
            for key,value in out_data['data'].items():
                out_data['data'][key] = base64.b64encode(value)
            with open(filename, 'wb') as outfile:
                yaml.dump(out_data, outfile, default_flow_style=False)
        else:
            print "Content has not changed, doing nothing."
    except AssertionError as exc:
        print "Error: %s" % exc
        pprint.pprint(exc)
        sys.exit(1)
